一、内存分区模型，
    1、大方面分区分四个区域：
        1. 代码区 ： 存放函数体的二进制代码，由操作系统管理
        2. 全局区 ： 存放全局变量、静态变量、常量
        3. 栈区 ： 编译器自动分配释放， 存储函数的参数值、局部变量等
        4. 堆区 ： 由程序员分配和释放， 若不释放，程序结束后释放
        5. 内存四区存储的意义：
            不同区域存放的数据，被赋予的生命周期不一样

    2、 程序运行前，分两块区域
        1. 代码区
            （1）存放CPU执行的机器指令
            （2）代码共享、只读，共享是为了代码频繁被访问；只读是防止程序被意外修改

        2. 全局区
            （1）存储全局变量、常量区（字符串常量(包括局部常量)和const修饰的全局常量）、静态变量（包括局部的）
            （2）此区域数据由操作系统释放

    3、程序运行后
         3.1 栈区
            （1）存储函数的参数值、局部变量等，由编译器释放
            （2）栈区存储的局部变量地址不要返回

         3.2 堆区
            （1）主要使用 new 开辟堆内存，由程序员释放， 若不释放会在程序结束时由操作系统释放
            （2）堆内存释放
                基本数据类型指针释放：delete p;
                数组类型指针释放：delete [] arr; 这是释放整个数组，delete arr; 仅释放数据第一个元素

     4、new 操作符说明
        4.1 语法：new 数据类型；开辟堆内存空间
        4.2 利用new创建的数据，返回的是数据对应的数据类型指针

二、引用
    1、基本使用
        数据类型 &别名 = 原名;  int &b = a;
    2、作用：给变量起别名
    3、注意事项：
        （1）引用必须初始化，且初始化后不能再修改别名，可以赋值
    4、引用做参数
        （1）作用：引用做形参可以直接改变实参的值，（引用形参是实参的别名，接收的是地址，指向同一块内存地址）
        （2）优点：简化指针修改实参；可以实现引用形参与指针形参同样的效果

    5、引用做函数返回值
        （1）不能直接返回局部变量引用；static 修饰除外（存放在全局区）
        （2）函数调用作为左值， 函数调用 = 返回变量的引用

    6、引用的本质：是指针常量（int* const ref = &a;），不可变更，仅能赋值
    7、常量引用
        （1）作用：常用引用主要用来修饰形参，防止误操作(修改)实参
        （2）用法：const int& ref = 10;
        （3）为什么不用值传递呢？ ******
            引用不会产生副本，减少额外的数据拷贝时间和内存的损耗；优化代码性能，提高代码健壮性












